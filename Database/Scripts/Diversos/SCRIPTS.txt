declare @IdSale int, @loja int
set @IdSale = 4821
set @loja = 8
--SELECT B.DESCRICAO, A.* FROM SALES A, LOJAS B WHERE A.CODLOJA = B.CODLOJA AND ID_SALES = @IdSale
--SELECT * FROM SALES WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--SELECT * FROM SALES_PROD WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--SELECT * FROM DELIVERYS_PROD A INNER JOIN DELIVERYS B ON A.ID_DELIVERY = B.ID WHERE A.CODLOJA = @loja AND A.ID_SALE = @IdSale ORDER BY A.ID_DELIVERY
--SELECT B.ALTERNATI, B.NOME, EST_ATUAL FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO INNER JOIN DELIVERYS_PROD C ON B.ALTERNATI = C.COD_ORIGINAL WHERE A.CODLOJA = 1 AND C.CODLOJA = @loja AND C.ID_SALE = @IdSale
--SELECT * FROM FORECAST_SALES WHERE idSale IN (SELECT ID FROM SALES WHERE CODLOJA = @loja AND ID_SALES = @IdSale)
--SELECT * FROM FORECAST_PRODUCT WHERE idForecastSale IN (SELECT id FROM FORECAST_SALES WHERE idSale IN (SELECT ID FROM SALES WHERE CODLOJA = @loja AND ID_SALES = @IdSale))

--update SALES set STATUS = 'Aberta' WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--update SALES_PROD set STATUS = 'Enviado' WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--DELETE DELIVERYS_PROD WHERE CODLOJA = @loja AND ID_SALE = @IdSale
--UPDATE SONO..PRODLOJAS SET EST_ATUAL = EST_ATUAL + C.QTD_DELIV, EST_LOJA = EST_LOJA + C.QTD_DELIV FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO INNER JOIN DELIVERYS_PROD C ON B.ALTERNATI = C.COD_ORIGINAL WHERE A.CODLOJA = 1 AND C.CODLOJA = @loja AND C.ID_SALE = @IdSale
--update DELIVERYS_PROD set DELIVERED = 1, REASON_RETURN = 'CLIENTE IRA AGENDAR UMA NOVA DATA NOVAMENTE' WHERE CODLOJA = @loja AND ID_SALE = @IdSale AND ID_DELIVERY = 5100
--delete DELIVERYS_PROD WHERE CODLOJA = @loja AND ID_SALE = @IdSale
--UPDATE DELIVERYS_PROD SET DELIVERED = 1 WHERE CODLOJA = 2 AND ID_SALE = 128333 AND COD_ORIGINAL = '2880-6' AND ID_DELIVERY = 573
--select * from VIEW_DELIVERYS WHERE D_DELIVERED = '2022-07-08'
--INSERT DELIVERYS_PROD SELECT 1747, ID_SALES, CODLOJA, QUANTIDADE, COD_ORIGINAL, '2022-07-08', '2022-07-08','2022-07-08', 0, NULL FROM SALES_PROD WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--SELECT * FROM SONO..VIEW_KARDEX_DIF_EST WHERE DIF <> 0
--UPDATE SONO..PRODLOJAS SET EST_ATUAL = B.ESTOQUE_KARDEX, EST_LOJA = B.ESTOQUE_KARDEX FROM SONO..PRODLOJAS A INNER JOIN SONO..VIEW_KARDEX_DIF_EST B ON A.CODIGO = B.CODIGO WHERE A.CODLOJA = 1 AND B.DIF <> 0
--select a.codigo, a.EST_ATUAL, a.EST_LOJA, ISNULL(b.est,0) from PRODLOJAS a left join (SELECT count(id) est, productId FROM PRODLOJAS_SERIES_MOVIMENTOS WHERE outputBeepDate IS NULL group by productId) b on a.codigo = b.productId where a.codloja = 1 AND ISNULL(b.est,0) <> a.EST_ATUAL
--SELECT * FROM VIEW_KARDEX_DIF_EST WHERE DIF <> 0
--UPDATE PRODLOJAS SET EST_ATUAL = B.ESTOQUE_KARDEX, EST_LOJA = B.ESTOQUE_KARDEX FROM PRODLOJAS A INNER JOIN VIEW_KARDEX_DIF_EST B ON A.CODIGO = B.CODIGO WHERE A.CODLOJA = 1 AND B.DIF <> 0

SELECT C.STATUS, B.* 
FROM DEVOLUCAO A
INNER JOIN ITENS_DEVOLUCAO B ON A.CODIGO = B.CODDEVOLUCAO
INNER JOIN NVENDI2 C ON B.CODVENDA = C.NUMVENDA AND C.CODPRODUTO = B.CODPRODUTO
WHERE A.DATA BETWEEN '2024-07-01' AND '2024-07-31'
AND B.QUANTIDADE_DEVOLVIDA > 0
AND C.STATUS = 'Enviado'

UPDATE NVENDI2 SET STATUS = 'Devolvido'
FROM DEVOLUCAO A
INNER JOIN ITENS_DEVOLUCAO B ON A.CODIGO = B.CODDEVOLUCAO
INNER JOIN NVENDI2 C ON B.CODVENDA = C.NUMVENDA AND C.CODPRODUTO = B.CODPRODUTO
WHERE A.DATA BETWEEN '2024-07-01' AND '2024-07-31'
AND B.QUANTIDADE_DEVOLVIDA > 0
AND C.STATUS = 'Enviado'


-------------------------------- BIPS
SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A
INNER JOIN PRODUTOS B ON A.productId = B.CODIGO
WHERE outputBeepDate IS NULL AND productId = 11024

SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A
INNER JOIN PRODUTOS B ON A.productId = B.CODIGO
WHERE outputBeepDate IS NULL and A.productId = 11056

SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A
INNER JOIN PRODUTOS B ON A.productId = B.CODIGO
WHERE serialNumber IN (24065811)

--DELETE PRODLOJAS_SERIES_MOVIMENTOS WHERE ID IN (434,

--UPDATE PRODLOJAS_SERIES_MOVIMENTOS SET outputModule = 'delivery', outputModuleId = 5433, outputBeepDate = '2024-07-15 13:27:13.623', outputUserId = 99 WHERE ID IN (72)
--UPDATE PRODLOJAS_SERIES_MOVIMENTOS SET outputModule = null, outputModuleId = null, outputBeepDate = null, outputUserId = null WHERE ID IN (1702,1703)
--UPDATE PRODLOJAS_SERIES_MOVIMENTOS SET productId = 1808 WHERE ID IN (1495)

select * from SUB_GRUPOS where nome LIKE '%IMPERIAL%AUX%MO%'
select * from produtos where SUBG = 78
--------------------------zera valores de pedidos
UPDATE PEDFOR SET VALORPED = 0, VALORBRUTO = 0 WHERE CODIGOPEDIDO = 15580
UPDATE PEDFORI SET VLUNITARIO = 0, VLTOTAL = 0, VALOR_UNIT_LIQ = 0, VALOR_TOTAL_LIQ = 0 WHERE NUMPEDIDO = 15580

-------------------------------- vendas não concretizada
SELECT C.DESCRICAO, A.EMISSAO, A.ID_SALES, A.NOMECLI, B.DESCRICAO, B.QUANTIDADE, B.UNITARIO1, B.DESCONTO, B.NVTOTAL FROM SALES A 
INNER JOIN SALES_PROD B ON A.ID = B.ID_SALE_ID
INNER JOIN LOJAS C ON C.CODLOJA = A.CODLOJA
WHERE B.GIFT = 0
AND A.O_V = '0'
AND EMISSAO BETWEEN '2024-03-01' AND '2024-03-31'
AND B.STATUS = 'Finalizada'
order by c.CODLOJA
-----------------------------------
UPDATE PRODLOJAS SET EST_ATUAL = B.ESTOQUE_KARDEX, EST_LOJA = B.ESTOQUE_KARDEX
--SELECT *
FROM PRODLOJAS A, VIEW_KARDEX_DIF_EST B
WHERE A.CODIGO = B.CODIGO
AND A.CODLOJA = 1
AND B.DIF <> 0
------------------------------------------- Relatório de balanço para importar para execel
SELECT A.CODIGO, ALTERNATI, A.NOME, APLICACAO TAMANHO, B.NOME SUB_GRUPO, C.NOME GRUPO
FROM PRODUTOS A
INNER JOIN SUB_GRUPOS B ON A.SUBG = B.CODIGO
INNER JOIN GRUPOS C ON A.GRUPO = C.CODIGO
WHERE ATIVO = 'S'
-------------- VERIFICA VENDAS COM STATUS ABERTO QUE DEVERIAM ESTAR FINALIZADAS
SELECT A.DESCRICAO, A.QUANTIDADE, A.STATUS, B.* 
FROM SALES_PROD A
INNER JOIN DELIVERYS_PROD B ON A.ID_SALES = B.ID_SALE AND A.CODLOJA = B.CODLOJA AND A.COD_ORIGINAL = B.COD_ORIGINAL
WHERE A.STATUS NOT IN ('Em lançamento', 'Entregando', 'Em Previsão', 'Finalizada')
AND B.DELIVERED = 0


UPDATE SALES_PROD SET STATUS = 'Finalizada'
FROM SALES_PROD A
INNER JOIN DELIVERYS_PROD B ON A.ID_SALES = B.ID_SALE AND A.CODLOJA = B.CODLOJA AND A.COD_ORIGINAL = B.COD_ORIGINAL
WHERE A.STATUS NOT IN ('Em lançamento', 'Entregando', 'Em Previsão', 'Finalizada')
AND B.DELIVERED = 0


SELECT * FROM SALES WHERE ID IN (
	select B.ID_SALE_ID from SALES a
	inner join SALES_PROD b on a.id = b.ID_SALE_ID
	where b.STATUS not in ('Enviado', 'Sem Agendamento') and a.STATUS = 'Aberta'
	and id not in (
		select ID_SALE_ID 
		from SALES_PROD a
		inner join sales b on a.ID_SALE_ID = b.id
		where a.STATUS in ('Enviado', 'Sem Agendamento') 
	)
)

UPDATE SALES SET STATUS = 'Fechada' FROM SALES WHERE ID IN (
	select B.ID_SALE_ID from SALES a
	inner join SALES_PROD b on a.id = b.ID_SALE_ID
	where b.STATUS not in ('Enviado', 'Sem Agendamento') and a.STATUS = 'Aberta'
	and id not in (
		select ID_SALE_ID 
		from SALES_PROD a
		inner join sales b on a.ID_SALE_ID = b.id
		where a.STATUS in ('Enviado', 'Sem Agendamento') 
	)
)
------------- Verificar produtos finalizados que estao com status sem estar finalizados
select * 
from SALES_PROD a
inner join DELIVERYS_PROD b on a.CODLOJA = b.codloja and a.ID_SALES = b.id_sale and a.COD_ORIGINAL = b.COD_ORIGINAL
inner join DELIVERYS C ON b.ID_DELIVERY = C.ID
where a.STATUS not in ('Finalizada', 'Devolvido')
and b.DELIVERED = 0
and C.D_DELIVERED is not null

------------------- mostrar nome diferente do grupo
select a.CODIGO, A.ALTERNATI, a.NOME, B.NOME GRUPO from SONO..PRODUTOS A
inner join SONO..SUB_GRUPOS b on a.SUBG = b.CODIGO
where a.ATIVO = 'S'
and SUBSTRING(a.NOME, 1,7) <> SUBSTRING(B.NOME, 1,7)

--------- trocar produto finalizado
declare @IdSale int, @loja int, @codProdAntigo varchar(20), @codProdNovo varchar(20)
set @IdSale = 17787
set @loja = 4
set @codProdAntigo = '2554-6'
set @codProdNovo = '2553-9'
--SELECT * FROM SALES WHERE ID_SALES = @IdSale
--SELECT * FROM SALES_PROD WHERE CODLOJA = @loja AND ID_SALES = @IdSale
--update DELIVERYS_PROD set COD_ORIGINAL = @codProdNovo WHERE CODLOJA = @loja AND ID_SALE = @IdSale AND COD_ORIGINAL = @codProdAntigo
--update SALES_PROD set STATUS = 'Enviado' WHERE CODLOJA = @loja AND ID_SALES = @IdSale AND COD_ORIGINAL = @codProdAntigo
--update SALES_PROD set STATUS = 'Finalizado' WHERE CODLOJA = @loja AND ID_SALES = @IdSale AND COD_ORIGINAL = @codProdNovo
--UPDATE SONO..PRODLOJAS SET EST_ATUAL = EST_ATUAL - 1, EST_LOJA = EST_LOJA - 1 FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO WHERE A.CODLOJA = 1 AND B.ALTERNATI = @codProdNovo
--UPDATE SONO..PRODLOJAS SET EST_ATUAL = EST_ATUAL + 1, EST_LOJA = EST_LOJA + 1 FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO WHERE A.CODLOJA = 1 AND B.ALTERNATI = @codProdAntigo

------------------------------------------------------
-- Mostrar estoque atual e estoque da contagem porém só dos itens negativos
SELECT B.ALTERNATI, B.NOME, B.ESTOQUE CONTAGEM, EST_ATUAL, C.QTD_DELIV, C.D_DELIVERING DATA_ENTREGA, A.ESTOQUE,
C.ID_DELIVERY NUM_ROTA, C.ID_SALE COD_VENDA
FROM SONO..VIEW_KARDEX_DIF_EST A
INNER JOIN BALANCO B ON A.ALTERNATI = B.ALTERNATI
INNER JOIN DELIVERYS_PROD C ON B.ALTERNATI = C.COD_ORIGINAL
WHERE A.EST_ATUAL < 0 --AND B.ALTERNATI = '655'
AND C.D_DELIVERING >= '2022-02-10'

-- Mostrar estoque atual e estoque da contagem
SELECT B.ALTERNATI, B.NOME, B.ESTOQUE CONTAGEM, A.EST_ATUAL, A.ESTOQUE
FROM SONO..VIEW_KARDEX_DIF_EST A
INNER JOIN BALANCO B ON A.ALTERNATI = B.ALTERNATI
WHERE B.ALTERNATI = '240'

-- Mostrando erros no Kardex/Estoque
SELECT * FROM SONO..VIEW_KARDEX_DIF_EST WHERE DIF <> 0

SELECT B.ALTERNATI, B.NOME, B.ESTOQUE CONTAGEM, EST_ATUAL, C.QTD_DELIV, C.D_DELIVERING DATA_ENTREGA, A.ESTOQUE,
C.ID_DELIVERY NUM_ROTA, C.ID_SALE COD_VENDA, C.DELIVERED
FROM SONO..VIEW_KARDEX_DIF_EST A
INNER JOIN BALANCO B ON A.ALTERNATI = B.ALTERNATI
INNER JOIN DELIVERYS_PROD C ON B.ALTERNATI = C.COD_ORIGINAL
WHERE B.ALTERNATI = '240'
AND C.D_DELIVERING >= '2022-02-10'

------------------------------------------
SELECT A.ID_SALE CODIGO_VENDA, B.NOMECLI, Convert(varchar(10), B.EMISSAO,103) EMISSAO, Convert(varchar(10), A.D_DELIVERED,103) DATA_ENTREGA,
CASE WHEN DELIVERED = 0 THEN 'ENTREGA' ELSE 'RETORNO' END TIPO, A.ID_DELIVERY CODIGO_ENTREGA
FROM VIEW_COUNT_SALE_DELIV_PROD A 
INNER JOIN VIEW_SALES B ON A.ID_SALE = B.ID_SALES AND A.CODLOJA = B.CODLOJA
WHERE D_DELIVERED BETWEEN '2022-02-01' AND '2022-02-28' AND A.CODLOJA = 6
ORDER BY ID_SALE

------------------ RETORNAR STATUS DELIV DE DESLOCAMENTO PARA EM LANÇAMENTO
declare @idDeliv int
set @idDeliv = 1285

SELECT B.NOME, A.EST_ATUAL, B.ALTERNATI, C.*
FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO 
INNER JOIN (
	SELECT COD_ORIGINAL, SUM(QTD_DELIV) QTD
	FROM DELIVERYS_PROD 
	WHERE ID_DELIVERY = @idDeliv
	GROUP BY COD_ORIGINAL) C
ON B.ALTERNATI = C.COD_ORIGINAL
WHERE A.CODLOJA = 1 
ORDER BY B.ALTERNATI

SELECT A.*, STATUS FROM DELIVERYS_PROD A
INNER JOIN SALES_PROD B ON A.COD_ORIGINAL = B.COD_ORIGINAL AND A.CODLOJA = B.CODLOJA AND A.ID_SALE = B.ID_SALES
WHERE ID_DELIVERY = @idDeliv

UPDATE SONO..PRODLOJAS SET EST_ATUAL = EST_ATUAL + C.QTD, EST_LOJA = EST_LOJA + C.QTD
FROM SONO..PRODLOJAS A INNER JOIN SONO..PRODUTOS B ON A.CODIGO = B.CODIGO 
INNER JOIN (
	SELECT COD_ORIGINAL, SUM(QTD_DELIV) QTD
	FROM DELIVERYS_PROD 
	WHERE ID_DELIVERY = @idDeliv
	GROUP BY COD_ORIGINAL) C
ON B.ALTERNATI = C.COD_ORIGINAL
WHERE A.CODLOJA = 1 


UPDATE DELIVERYS_PROD SET D_DELIVERING = NULL WHERE ID_DELIVERY = @idDeliv

UPDATE SALES_PROD SET STATUS = 'Em lançamento' 
FROM SALES_PROD A LEFT JOIN DELIVERYS_PROD B ON A.CODLOJA = B.CODLOJA AND A.ID_SALES = B.ID_SALE AND A.COD_ORIGINAL = B.COD_ORIGINAL 
WHERE B.ID_DELIVERY = @idDeliv

UPDATE DELIVERYS SET STATUS = 'Em lançamento', ID_USER_DELIVERING = NULL, dateUpdateDelivering = NULL WHERE ID = @idDeliv
--------------------- BALANÇO
SELECT A.ALTERNATI, B.EST_ATUAL, EST_LOJA, C.ESTOQUE
FROM PRODUTOS A
INNER JOIN PRODLOJAS B ON A.CODIGO = B.CODIGO
INNER JOIN SONOENTREGAS..BALANCO C ON A.ALTERNATI = C.ALTERNATI
WHERE B.CODLOJA = 1
AND A.ATIVO <> 'N'

--UPDATE PRODLOJAS SET EST_ATUAL = C.ESTOQUE, EST_LOJA = C.ESTOQUE
FROM PRODUTOS A
INNER JOIN PRODLOJAS B ON A.CODIGO = B.CODIGO
INNER JOIN SONOENTREGAS..BALANCO C ON A.ALTERNATI = C.ALTERNATI
WHERE B.CODLOJA = 1
AND A.ATIVO <> 'N'
--------------------------- ARRUMAR DRE
SELECT  A.NUMVENDA, Convert(varchar(10), A.DATA, 103) EMISSAO, A.CODPRODUTO, C.NOME, A.QUANTIDADE, A.UNITARIO1, A.NVTOTAL, 
A.PCO_COMPRA TABVENDA, B.PCO_COMPRA, A.PCO_REMAR, A.LUCRO_REAL
FROM NVENDI2 A
INNER JOIN PRODLOJAS B ON A.CODPRODUTO = B.CODIGO
INNER JOIN PRODUTOS C ON B.CODIGO = C.CODIGO
WHERE A.DATA BETWEEN '2022-05-01' AND '2022-06-30'
AND B.CODLOJA = 1
AND A.PCO_COMPRA <> B.PCO_COMPRA
AND A.QUANTIDADE > 1
ORDER BY A.DATA, A.NUMVENDA

UPDATE NVENDI2 SET PCO_COMPRA = A.PCO_COMPRA / 2, PCO_LIQ = A.PCO_COMPRA / 2, C_AQUIS = A.PCO_COMPRA / 2
FROM NVENDI2 A
INNER JOIN PRODLOJAS B ON A.CODPRODUTO = B.CODIGO
WHERE A.DATA BETWEEN '2022-05-01' AND '2022-06-30'
AND B.CODLOJA = 1
AND A.PCO_COMPRA <> B.PCO_COMPRA
AND A.QUANTIDADE > 1
AND A.CODPRODUTO <> 1672

-------------------------- importar usando drive ACE OLEDB 12
SELECT * FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0', 'Excel 12.0;Database=C:\Users\User\Desktop\Produtos Sono.xlsx', [Página1$])

SELECT REPLACE(ALTERNATI, 'X1', '') as ALTERNATI, DESCRICAO, EST, CONT, Dif
--INTO Produtos
FROM OPENDATASOURCE('Microsoft.ACE.OLEDB.12.0', 'Data Source=C:\Siti Brasil\Balanco.xlsx;Extended Properties=Excel 12.0')...[Plan1$]
TIPO ALTERNATI: ALTER TABLE ProdutosExcel ADD COD VARCHAR(20) COLLATE SQL_Latin1_General_CP850_CI_AI

SELECT *
--INTO NOTAS_FAB
FROM OPENDATASOURCE('Microsoft.ACE.OLEDB.12.0', 'Data Source=C:\Users\USER-01\Desktop\notas_fabrica.xlsx;Extended Properties=Excel 12.0')...[TESTE$]
WHERE NOTA IS NOT NULL


EXEC sp_configure 'show advanced options', 1
RECONFIGURE
GO
EXEC sp_configure 'ad hoc distributed queries', 1
RECONFIGURE
GO
NOTAS_FAB

SELECT ALTERNATI, NOME_TOT, TAMANHO_TOT, TAMANHO, SUB_GRUPO
INTO PROD_IMPORT
FROM OPENDATASOURCE('Microsoft.ACE.OLEDB.12.0', 'Data Source=C:\Users\Alexandre\Downloads\Produtos.xlsx;Extended Properties=Excel 12.0')...[Página1$]
WHERE ALTERNATI IS NOT NULL

resolve problema de null
https://www.aspsnippets.com/Articles/The-OLE-DB-provider-Microsoft.Ace.OLEDB.12.0-for-linked-server-null.aspx
USE [master] 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'AllowInProcess', 1 
GO 
EXEC master.dbo.sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0', N'DynamicParameters', 1 
GO 
--------------------------------------------------------------------

--select B.ALTERNATI, A.NOME, B.NOME
UPDATE SONO_SS.SONO_SAO_LUIS.DBO.PRODUTOS SET NOME = B.NOME
from SONO_SS.SONO_SAO_LUIS.DBO.PRODUTOS A
INNER JOIN PRODUTOS B ON A.ALTERNATI = B.ALTERNATI
WHERE A.ATIVO = 'S' AND B.ATIVO = 'S' AND B.ALTERNATI <> ''
AND A.NOME <> B.NOME

--------------------------------------------- ASSISTÊNCIAS
SELECT A.ALTERNATI COD_PRODUTO, A.NOME PRODUTOS, B.QUANTIDADE QTD, D.DESCRIPTION DEFEITO, B.OTHER_DEF OUTRO_DEFEITO, B.OBS, C.ID_SALES COD_VENDA, C.NOMECLI
FROM SONO..PRODUTOS A 
INNER JOIN MAINTENANCE B ON A.ALTERNATI = B.COD_ORIGINAL
INNER JOIN SALES C ON B.ID_SALE = C.ID_SALES AND B.CODLOJA = C.CODLOJA
INNER JOIN CAT_DEFECT_MAIN D ON B.ID_CAT_DEF = D.ID
WHERE A.NOME LIKE 'SIENA%' OR A.NOME LIKE 'GENOVA%'
AND B.D_ENVIO >= '2022-05-20'
ORDER BY A.NOME

SELECT A.ALTERNATI COD_PRODUTO, A.NOME PRODUTOS, C.QTD QTD_VENDA, ISNULL(SUM(B.QUANTIDADE), 0) QTD_ASSIST, ROUND((ISNULL(SUM(B.QUANTIDADE), 0) / C.QTD) * 100, 2) PERCENTUAL
FROM SONO..PRODUTOS A 
INNER JOIN MAINTENANCE B ON A.ALTERNATI = B.COD_ORIGINAL
INNER JOIN (
	SELECT COD_ORIGINAL, SUM(QUANTIDADE) QTD
	FROM SALES_PROD SP
	INNER JOIN SALES S ON SP.ID_SALE_ID = S.ID
	WHERE S.EMISSAO >= '2022-05-20'
	GROUP BY COD_ORIGINAL
) C ON C.COD_ORIGINAL = A.ALTERNATI
WHERE B.D_ENVIO >= '2022-05-20' AND A.NOME LIKE 'SIENA%' OR A.NOME LIKE 'GENOVA%'
GROUP BY A.ALTERNATI, A.NOME, C.QTD
ORDER BY QTD_ASSIST DESC

SELECT CODIGO, NOME, 
substring(APLICACAO, 0, charindex(' X ', APLICACAO)) as ALT,
substring(APLICACAO,  charindex(' X ', APLICACAO) +2 , 4) as COMP,
substring(substring(APLICACAO,  charindex(' X ', APLICACAO) + 2, LEN(APLICACAO)), charindex(' X ', substring(APLICACAO,  charindex(' X ', APLICACAO) + 2, LEN(APLICACAO)))+2, 9) as LARG,
APLICACAO
FROM PRODUTOS WHERE ATIVO = 'S'
----------------------------------------- Conferencia de balanço
SELECT A.CODIGO, A.ALTERNATI, A.NOME, B.EST_ATUAL
FROM PRODUTOS A
INNER JOIN PRODLOJAS B ON A.CODIGO = B.CODIGO
INNER JOIN SUB_GRUPOS C ON C.CODIGO = A.SUBG
INNER JOIN GRUPOS D ON D.CODIGO = A.GRUPO
WHERE B.CODLOJA = 1
AND A.ATIVO = 'S'
ORDER BY D.NOME, C.NOME
------------------------ Verificando Poder de usuário
select * from USUARIONEW where codigo in (119, 123, 124, 1)

--'1111111111111110000000000'

--0E988A46A8700A21BE0DE6A7F476C057	0E988A46A8700A21BE0DE6A7F476C057

select * from CONFIG_ACESSUPERFISCAL where codigousuario in (119)

select CODIGOUSUARIO, PERMITIR from CONFIG_ACESSUPERFISCAL where codigousuario in (123, 124, 1) group by CODIGOUSUARIO, PERMITIR

--update CONFIG_ACESSUPERFISCAL set PERMITIR = 0 where CODIGOUSUARIO = 119
-----------------------
SELECT * FROM VIEW_BEEP_DELIVERY
WHERE ID_DELIVERY > 5529
AND QTD <> QTD_BEEP
ORDER BY ID_DELIVERY

SELECT * FROM VIEW_BEEP_DELIVERY
WHERE ID_DELIVERY = 5535
AND QTD <> QTD_BEEP
ORDER BY ID_DELIVERY

SELECT * FROM DELIVERYS WHERE ID = 5535
SELECT ID_DELIVERY, COD_ORIGINAL FROM DELIVERYS_PROD WHERE ID_DELIVERY = 5535 GROUP BY ID_DELIVERY, COD_ORIGINAL


--UPDATE DELIVERYS SET STATUS = 'Finalizada' WHERE ID = 5535
--UPDATE DELIVERYS SET STATUS = 'Em lançamento' WHERE ID = 5535
---------------
UPDATE NVENDI2 SET PCO_COMPRA = B.PCO_COMPRA, C_AQUIS = B.C_AQUIS, PCO_LIQ = B.PCO_LIQ, LUCRO_BRUTO = ROUND(UNITARIO2 - B.PCO_COMPRA, 2), LUCRO_REAL = ROUND(UNITARIO2 - B.PCO_COMPRA, 2)
FROM NVENDI2 A
INNER JOIN PRODLOJAS B ON A.CODPRODUTO = B.CODIGO 
INNER JOIN NVENDA2 C ON C.CODIGOVENDA = A.NUMVENDA
WHERE B.CODLOJA = 1
AND C.EMISSAO >= '2024-08-01'

SELECT A.NOME, B.* FROM PRODUTOS A
INNER JOIN PRODLOJAS B ON A.CODIGO = B.CODIGO
WHERE B.CODLOJA =1 
AND A.ALTERNATI = '2487-6'
---------------------------------------- COLOCA PODER DE 1 USUÁRIO EM OUTRO
UPDATE A SET A.ACESSO = B.ACESSO,
A.ACESSO2 = B.ACESSO2,
A.ACESSO3 = B.ACESSO3,
A.ACESSO4 = B.ACESSO4,
A.ACESSO5 = B.ACESSO5,
A.ACESSO6 = B.ACESSO6
FROM USUARIONEW A, USUARIONEW B 
WHERE A.CODIGO = 21 AND B.CODIGO = 3

UPDATE USUARIONEW SET SFISCAL = '99C0961BA963439CF1611D901B45D4F8', SSUPERV = '99C0961BA963439CF1611D901B45D4F8' WHERE CODIGO = 21
--------------------------------------
DECLARE @PROD1 INT, @PROD2 INT, @EST INT
SET @PROD1 = 1991
SET @PROD2 = 11006

SELECT * FROM KARDEX_PRODUTOS_HISTORICO WHERE DOCUMENTO = 'AJ110325' AND CODPRODUTO IN (@PROD1, @PROD2)
SELECT * FROM VIEW_KARDEX_DIF_EST_BEEP WHERE DIF_BEEP <> 0 AND CODIGO IN (@PROD1, @PROD2)

UPDATE KARDEX_PRODUTOS_HISTORICO
SET
QUANT_ENTRADA = 0,
QUANT_SAIDA = 3,
ENTRADA_SAIDA = 'S'
WHERE DOCUMENTO = 'AJ110325' AND CODPRODUTO = @PROD1

UPDATE KARDEX_PRODUTOS_HISTORICO
SET
QUANT_ENTRADA = 0,
QUANT_SAIDA = 3,
ENTRADA_SAIDA = 'S'
WHERE DOCUMENTO = 'AJ110325' AND CODPRODUTO = @PROD2













--SELECT * FROM VIEW_KARDEX_DIF_EST WHERE DIF <> 0
--UPDATE PRODLOJAS SET EST_ATUAL = B.ESTOQUE_KARDEX, EST_LOJA = B.ESTOQUE_KARDEX FROM PRODLOJAS A INNER JOIN VIEW_KARDEX_DIF_EST B ON A.CODIGO = B.CODIGO WHERE A.CODLOJA = 1 AND B.DIF <> 0
SELECT * FROM SONOENTREGAS..VIEW_BEEP_DELIVERY_PROD WHERE ID_DELIVERY = 6524 and dif <> 0 --AND COD_ORIGINAL = '2453-2' order by QTD_BEEP
--SELECT B.NOME, A.*, C.DESCRIPTION FROM PRODLOJAS_SERIES_MOVIMENTOS A INNER JOIN PRODUTOS B ON A.productId = B.CODIGO INNER JOIN SONOENTREGAS..USERS C ON C.ID = A.outputUserId WHERE serialNumber IN ('28719659')
SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A INNER JOIN PRODUTOS B ON A.productId = B.CODIGO WHERE outputModuleId = 6511 order by b.NOME

--SELECT * FROM VIEW_KARDEX_DIF_EST_BEEP WHERE DIF_BEEP <> 0
--UPDATE PRODLOJAS_SERIES_MOVIMENTOS SET inputModuleId = 31258 WHERE serialNumber = '34252121'
--SELECT CODIGO, ALTERNATI, NOME, ORIGINAL FROM PRODUTOS WHERE ORIGINAL <> '' AND ATIVO <> 'N' -- 283
--SELECT CODIGO, ALTERNATI, NOME, ORIGINAL FROM PRODUTOS WHERE ORIGINAL = '' AND ATIVO <> 'N' -- 116
--SELECT FORMAT(GETDATE(), 'yyyy-MM-dd 00:00:00')
--SELECT * FROM PRODLOJAS_SERIES_MOVIMENTOS WHERE productId = 11045
--SELECT * FROM SONOENTREGAS..MAINTENANCE_DELIV A INNER JOIN PRODLOJAS_SERIES_MOVIMENTOS B ON A.ID = B.outputModuleId WHERE A.ID_MAINT = 1372
--28777118/28777117

SELECT * FROM SONOENTREGAS..VIEW_MODULES_NOT_BEEP
WHERE CODIGO NOT IN (30990, 310462, 310482,31270
,16353,16363,31537,312611)
AND DATA <= FORMAT(GETDATE(), 'yyyy-MM-dd 00:00:00')
order by MODULO, data


--SELECT * FROM PRODLOJAS_SERIES_MOVIMENTOS A INNER JOIN PRODUTOS B ON A.productId = B.CODIGO WHERE outputModule = 'maintenance' and outputModuleId = 1339
--SELECT * FROM SONOENTREGAS..VIEW_MODULES_NOT_BEEP
--UPDATE PRODLOJAS_SERIES_MOVIMENTOS SET outputUserId = NULL, outputModule = NULL, outputBeepDate = NULL, outputUserId = NULL WHERE outputModuleId = 6523


SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A INNER JOIN PRODUTOS B ON A.productId = B.CODIGO WHERE inputModuleId = 6519
SELECT B.NOME, A.* FROM PRODLOJAS_SERIES_MOVIMENTOS A INNER JOIN PRODUTOS B ON A.productId = B.CODIGO WHERE outputModuleId = 6521 and productId in (11045,11047) -- 34260776
