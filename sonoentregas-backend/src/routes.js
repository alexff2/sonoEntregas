const { Router } = require('express')

const routes = new Router()

const { ensureAuthenticated } = require('./middlewares/ensureAuthenticated')

//Import Controllers
const connectionsController = require('./controllers/connectionsController')
const authController = require('./controllers/authController')
const usersController = require('./controllers/usersController')
const employeeController = require('./controllers/employeeController')
const productsController = require('./controllers/productsController')
const transferController = require('./controllers/transferController')
const purchaseOrderController = require('./controllers/purchaseOrderController')
const purchaseNoteController = require('./controllers/purchaseNoteController')
const salesSceController = require('./controllers/salesSceController')
const salesController = require('./controllers/salesController')
const returnsController = require('./controllers/returnsController')
const carsController = require('./controllers/carsController')
const forecastController = require('./controllers/forecastController')
const forecastValidationController = require('./controllers/forecastValidationController')
const deliveryController = require('./controllers/deliveryController')
const deliveryUpdateController = require('./controllers/deliveryUpdateController')
const homeController = require('./controllers/homeController')
const dashboardController = require('./controllers/dashboardController')
const maintenanceController = require('./controllers/maintController')
const maintenanceDelivController = require('./controllers/maintDelivController')
const mainVisitController = require('./controllers/mainVisitController')
const reportsController = require('./controllers/reportsController')
const devController = require('./controllers/devController')
const catDefController = require('./controllers/catDefController')
const goalsController = require('./controllers/goalsController')
const promotionController = require('./controllers/promotionController')
const serieController = require('./controllers/serieController')
const balanceByBeepController = require('./controllers/balanceByBeepController')
const syncController = require('./controllers/syncController')

//Routes
//Connections
routes.get('/connections', connectionsController.findConnections)
//Shops
routes.get('/shops', connectionsController.findShops)
routes.get('/shops/sce', connectionsController.findShopsSce)
//Login
routes.post('/authenticated', authController.create)
routes.get('/token/validation', authController.validationToken)
//Users
routes.get('/users/:loja', usersController.index)
routes.post('/users', usersController.create)
routes.put('/users/:userId', usersController.update)

  //Employees
  routes.get('/employee', ensureAuthenticated, employeeController.index)
  //Products SCE CD
  routes.get('/products', productsController.index)
  routes.get('/products/stock', ensureAuthenticated, productsController.findStock)
  routes.get('/product', ensureAuthenticated, productsController.findProduct)
  routes.get('/product/to-beep', ensureAuthenticated, productsController.findProductToBeepById)
  routes.put('/product/barcode', ensureAuthenticated, productsController.updateBarCode)
  // Beep
  routes.get('/beep-pendant-modules', serieController.findBeepPendantModules)
  routes.get('/serial/product', serieController.findOpenSeriesByProduct)
  routes.get('/serial/product/open', serieController.findSerialNumberOfProduct)
  routes.post('/serial/first', ensureAuthenticated, serieController.createFirst)
  routes.put('/serial/finished', ensureAuthenticated, serieController.finishesIfOpened)
  routes.put('/serial/change/product', ensureAuthenticated, serieController.changeSerialNumberOfProduct)
  // Balance by beep
  routes.get('/balance-by-beep', balanceByBeepController.find)
  routes.get('/balance-by-beep/open', ensureAuthenticated, balanceByBeepController.open)
  routes.get('/balance-by-beep/:id', ensureAuthenticated, balanceByBeepController.findById)
  routes.get('/balance-by-beep/:id/report', ensureAuthenticated, balanceByBeepController.reportBalance)
  routes.post('/balance-by-beep', ensureAuthenticated, balanceByBeepController.create)
  routes.post('/balance-by-beep/beep', ensureAuthenticated, balanceByBeepController.createBeep)
  routes.post('/balance-by-beep/beep-not-found', ensureAuthenticated, balanceByBeepController.createBeepNotFound)
  routes.put('/balance-by-beep/:id/close', ensureAuthenticated, balanceByBeepController.close)
  // Purchase Order
  routes.get('/purchase/order', purchaseOrderController.find)
  routes.get('/purchase/order/open', purchaseOrderController.findOpen)
  routes.get('/purchase/order/:id/products', purchaseOrderController.findProducts)
  routes.post('/purchase/order', ensureAuthenticated, purchaseOrderController.create)
  routes.post('/purchase/order/:id/product', ensureAuthenticated, purchaseOrderController.addProduct)
  routes.put('/purchase/order/:id', ensureAuthenticated, purchaseOrderController.update)
  routes.delete('/purchase/order/:id/product/:item', ensureAuthenticated, purchaseOrderController.rmvProduct)
  routes.put('/purchase/order/:id/product/:item', ensureAuthenticated, purchaseOrderController.changeQuantity)
  routes.patch('/purchase/order/:id/close', ensureAuthenticated, purchaseOrderController.close)
  routes.patch('/purchase/order/:id/open', ensureAuthenticated, purchaseOrderController.open)
  // Purchase Notes
  routes.get('/purchase/notes', purchaseNoteController.find)
  routes.get('/purchase/note/:id/products', purchaseNoteController.findProducts)
  routes.get('/purchase/note/:id/beep', purchaseNoteController.findToBeep)
  routes.put('/purchase/notes/:id', purchaseNoteController.updateId)
  // Transfer
  routes.get('/transfer', transferController.find)
  routes.get('/transfer/:id/beep', transferController.findToBeep)
  routes.post('/transfer', ensureAuthenticated, transferController.create)
  routes.put('/transfer/:id', ensureAuthenticated, transferController.update)
  routes.put('/transfer/:id/product/add', ensureAuthenticated, transferController.addProduct)
  routes.put('/transfer/:id/product/:productId/rmv', ensureAuthenticated, transferController.rmvProduct)
  routes.delete('/transfer/:id', ensureAuthenticated, transferController.delete)
  //Sales SCE Shops
  routes.get('/salesshop/:emissao/:loja', salesSceController.salesSce)
  routes.get('/sales/:codDAV/shop/:idShop/products', salesSceController.salesSceProd)
  routes.post('/sales-shop/:loja', salesSceController.sendSale)
  routes.post('/sales-shop', salesSceController.cancelSubmitSales)
  routes.post('/salesshop/reverse/:idSale', salesSceController.reverseStock)
  routes.put('/sales/:idSale/updateAddress', salesSceController.updateAddressClient)
  routes.put('/sales/:idSale/dtPrevShopUpdate', salesSceController.dtPrevShopUpdate)
  routes.put('/sales/:idSale/shopObs', salesSceController.shopObsUpdate)
//Sales Sono Delivery
routes.get('/sales', salesController.findSales)
routes.get('/sales/home', salesController.findSalesToHome)
routes.get('/sales/shop', salesController.findOpenSalesToShop)
routes.get('/sales/shop-by-name', salesController.findSalesToShopByName)
routes.get('/sales/:saleId/shop', salesController.findSalesToShopById)
routes.get('/sales/:idSale/forecast/create', salesController.findSalesToCreatedForecast)
routes.get('/sales/:idSale/routes/create', salesController.findSalesToCreatedDelivery)
routes.get('/sales/:idSale/withdrawal/create', salesController.findSalesToWithdrawal)
routes.get('/sales/:idSale/loja/:idLoja/product/:idProduct', salesController.findProductDetails)
routes.put('/sales/:id/reschedule', salesController.updateDateDelivery)
routes.put('/sales/:id/unschedule', salesController.unschedule)
// Returns Sales
routes.post('/returns', ensureAuthenticated, returnsController.create)
routes.put('/returns/delivery/link', ensureAuthenticated, returnsController.linkSaleReturnInDelivery)
routes.put('/returns/delivery/unlink', ensureAuthenticated, returnsController.unlinkSaleReturnInDelivery)
routes.put('/returns/delivery/finish', ensureAuthenticated, returnsController.finish)
routes.delete('/returns/:id', ensureAuthenticated, returnsController.cancel)
routes.get('/returns', ensureAuthenticated, returnsController.findByClientOrDate)
routes.get('/returns/open', ensureAuthenticated, returnsController.findOpen)
routes.get('/returns/sce', ensureAuthenticated, returnsController.findSce)
routes.get('/returns/address', ensureAuthenticated, returnsController.findAddress)
//Cars
routes.get('/cars', carsController.index)
routes.post('/cars', carsController.create)
routes.put('/cars/:id', carsController.update)
// Forecasts
routes.get('/forecast', forecastController.findCreatedForecast)
routes.get('/forecast/open', forecastController.findOpenForecast)
routes.get('/forecast/finished', forecastController.findFinishedForecast)
routes.get('/forecast/:id', forecastController.findForecastUnique)
routes.get('/forecast/:id/view', forecastController.findSalesOfForecast)
routes.post('/forecast', ensureAuthenticated, forecastController.create)
routes.post('/forecast/:id/sales/add', ensureAuthenticated, forecastController.addSale)
routes.put('/forecast/:id', ensureAuthenticated, forecastController.update)
routes.put('/forecast/:id/started', ensureAuthenticated, forecastController.started)
routes.put('/forecast/:id/finish', ensureAuthenticated, forecastController.finishForecast)
routes.put('/forecast/:id/sale/:idSale/validation', ensureAuthenticated, forecastValidationController.validation)
routes.put('/forecast/:id/sale/:idSale/invalidation/request', ensureAuthenticated, forecastValidationController.requestInvalidation)
routes.put('/forecast/:id/sale/:idSale/invalidation', ensureAuthenticated, forecastValidationController.invalidate)
routes.put('/forecast/:id/sale/:idSale/rmv/auth', ensureAuthenticated, forecastValidationController.authRemove)
routes.delete('/forecast/sale/:id', ensureAuthenticated, forecastController.rmvSale)

//Deliveries
routes.get('/delivery', deliveryController.findToBeep)
routes.get('/delivery/:status', deliveryController.index)
routes.get('/delivery/:status/:date', deliveryController.index)
routes.get('/delivery/:id/sales/view', deliveryController.findDelivery)
routes.get('/delivery/:idShop/sales/shops', deliveryController.findDeliveryByShop)
routes.post('/delivery', ensureAuthenticated, deliveryController.create)
routes.post('/delivery/:id/sales/add', ensureAuthenticated, deliveryController.addSale)
routes.post('/delivery/sale/rmv', ensureAuthenticated, deliveryController.rmvSale)
routes.post('/delivery/withdrawal', ensureAuthenticated, deliveryUpdateController.withdrawalSale)
routes.put('/delivery/:id/header', ensureAuthenticated, deliveryUpdateController.updateHeader)
routes.put('/delivery/:id/delivering', ensureAuthenticated, deliveryUpdateController.delivering)
routes.put('/delivery/:id/returns', ensureAuthenticated, deliveryUpdateController.returns)
routes.put('/delivery/:id/returns-delete', ensureAuthenticated, deliveryUpdateController.returnsDelete)
routes.put('/delivery/:id/finish', ensureAuthenticated, deliveryUpdateController.finish)
routes.delete('/delivery/:id', ensureAuthenticated, deliveryController.delete)

//Homes
routes.get('/home', homeController.index)
routes.get('/dashboard/:dateSearch', dashboardController.index)
//Maintenance
routes.get('/maintenance/:codloja', maintenanceController.index)
routes.get('/maintenance/:idSale/:codloja', maintenanceController.searchSaleToMaint)
routes.post('/maintenance', maintenanceController.create)
routes.delete('/maintenance/:id', maintenanceController.delete)
routes.get('/maintenance/:typeSeach/:search/:codloja', maintenanceController.findMain)
//Maintenance Delivery
routes.get('/maintenancedeliv', maintenanceDelivController.index)
routes.get('/maintenancedeliv/:idMain', maintenanceDelivController.findMaintId)
routes.get('/maintenancedeliv/:typeSeach/:search', maintenanceDelivController.findMaintDeliv)
//Maintenance Visit
routes.post('/maintenance/visit', mainVisitController.create)
routes.put('/maintenance/visit/reschedule/:id', mainVisitController.reschedule)
routes.put('/maintvisit/start/:id', mainVisitController.startVisit)
routes.put('/maintvisit/finish/:id', mainVisitController.finishVisit)
// Category Def
routes.get('/catdef', catDefController.index)
//Reports
routes.get('/reports/order-suggestion', reportsController.listProducts)
routes.get('/reports/pending-products-out-of-stock', reportsController.getPendingProductsOutOfStock)
routes.get('/reports/sales/open', reportsController.salesOpen)
routes.get('/reports/products/movement', reportsController.productsMovement)
routes.get('/reports/purchase/requests', reportsController.purchaseRequest)
routes.get('/reports/dre', reportsController.dre)
routes.get('/reports/deliveries', reportsController.deliveries)
routes.get('/reports/extra-routes', reportsController.extraRoutes)
// Goals
routes.get('/goals', goalsController.index)
routes.post('/goals', ensureAuthenticated, goalsController.create)
routes.put('/goals/:id', ensureAuthenticated, goalsController.update)
routes.get('/goals/getAmount', goalsController.getAmountReached)
// Promotion
routes.get('/promotion/open', ensureAuthenticated, promotionController.promotionOpen)
routes.post('/promotion', ensureAuthenticated, promotionController.create)
//Synchro
routes.post('/synchronize', ensureAuthenticated, syncController.synchronize)
//Developer 
routes.get('/dev', devController.getTable)
routes.get('/teste', devController.teste)
routes.get('/dev/product/find/serials', devController.findProductsWithSerials)
routes.delete('/dev/product/delete/serial', devController.deleteSerial)

module.exports = routes
